
    public List<DoubleSolution> doCrossover(double probability, DoubleSolution parent1, DoubleSolution parent2) {
        List<DoubleSolution> offspring = new ArrayList(2);
        offspring.add((DoubleSolution)parent1.copy());
        offspring.add((DoubleSolution)parent2.copy());
        if ((Double)this.randomGenerator.getRandomValue() <= probability) {
            for(int i = 0; i < parent1.getNumberOfVariables(); ++i) {
                double valueX1 = (Double)parent1.getVariableValue(i);
                double valueX2 = (Double)parent2.getVariableValue(i);
                if ((Double)this.randomGenerator.getRandomValue() <= 0.5D) {
                    if (Math.abs(valueX1 - valueX2) > 1.0E-14D) {
                        double y1;
                        double y2;
                        if (valueX1 < valueX2) {
                            y1 = valueX1;
                            y2 = valueX2;
                        } else {
                            y1 = valueX2;
                            y2 = valueX1;
                        }

                        double lowerBound = parent1.getLowerBound(i);
                        double upperBound = parent1.getUpperBound(i);
                        double rand = (Double)this.randomGenerator.getRandomValue();
                        double beta = 1.0D + 2.0D * (y1 - lowerBound) / (y2 - y1);
                        double alpha = 2.0D - Math.pow(beta, -(this.distributionIndex + 1.0D));
                        double betaq;
                        if (rand <= 1.0D / alpha) {
                            betaq = Math.pow(rand * alpha, 1.0D / (this.distributionIndex + 1.0D));
                        } else {
                            betaq = Math.pow(1.0D / (2.0D - rand * alpha), 1.0D / (this.distributionIndex + 1.0D));
                        }

                        double c1 = 0.5D * (y1 + y2 - betaq * (y2 - y1));
                        beta = 1.0D + 2.0D * (upperBound - y2) / (y2 - y1);
                        alpha = 2.0D - Math.pow(beta, -(this.distributionIndex + 1.0D));
                        if (rand <= 1.0D / alpha) {
                            betaq = Math.pow(rand * alpha, 1.0D / (this.distributionIndex + 1.0D));
                        } else {
                            betaq = Math.pow(1.0D / (2.0D - rand * alpha), 1.0D / (this.distributionIndex + 1.0D));
                        }

                        double c2 = 0.5D * (y1 + y2 + betaq * (y2 - y1));
                        c1 = this.solutionRepair.repairSolutionVariableValue(c1, lowerBound, upperBound);
                        c2 = this.solutionRepair.repairSolutionVariableValue(c2, lowerBound, upperBound);
                        if ((Double)this.randomGenerator.getRandomValue() <= 0.5D) {
                            ((DoubleSolution)offspring.get(0)).setVariableValue(i, c2);
                            ((DoubleSolution)offspring.get(1)).setVariableValue(i, c1);
                        } else {
                            ((DoubleSolution)offspring.get(0)).setVariableValue(i, c1);
                            ((DoubleSolution)offspring.get(1)).setVariableValue(i, c2);
                        }
                    } else {
                        ((DoubleSolution)offspring.get(0)).setVariableValue(i, valueX1);
                        ((DoubleSolution)offspring.get(1)).setVariableValue(i, valueX2);
                    }
                } else {
                    ((DoubleSolution)offspring.get(0)).setVariableValue(i, valueX2);
                    ((DoubleSolution)offspring.get(1)).setVariableValue(i, valueX1);
                }
            }
        }

        return offspring;
    }
